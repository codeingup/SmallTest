<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }
        body{
            width: 100vw;
            height: 100vh;
        }
        canvas{
            background: black;
        }
    </style>
</head>

<body>
    <canvas id="RenderClip"></canvas>

    <script>
        const canvasWidth = window.innerWidth; //  canvas 大小
        const canvasHeight = window.innerHeight; //  canvas 大小
        // 获取范围内的随机数
        function randomRange(min, max) {
            return Math.random() * (max - min) + min;
        }

        // 构建粒子类 Particle
        class Particle {
            // 初始时的x,y坐标
            x;
            y;
            coords;
            angle;
            speed;
            friction;
            gravity;
            hue;
            brightness;
            alpha;
            alphaDecay;
            constructor(x, y, hue) {
                this.x = x;
                this.y = y;

                // 粒子坐标集合
                this.coords = [
                    [x, y],
                    [x, y],
                    [x, y],
                ];

                // 随机弧度
                this.angle = randomRange(-Math.PI * 5, Math.PI * 5);
                // 随机基本速度
                this.speed = randomRange(1, 10);

                // 摩擦系数、重力（减缓粒子速度、模拟抛物线下坠）
                this.friction = 0.95; // 百分比 不同材质的物体摩擦系数不同（有现成值） 0.95
                this.gravity = randomRange(1, 5); // 作用于y轴加速度 模拟往下坠 1

                // 随机色调（基础色调-20和+20之间）
                this.hue = randomRange(hue - 20, hue + 20);
                // 随机亮度
                this.brightness = randomRange(50, 80);
                // 初始透明度
                this.alpha = 1;
                // 随机的透明度衰变系数（透明度减淡）
                this.alphaDecay = randomRange(0.015, 0.02);
            }

            // 更新某个（索引）粒子属性
            update() {
                // 删掉最后一项 在最前面塞入一项
                this.coords.pop();
                this.coords.unshift([this.x, this.y]);

                this.speed *= this.friction; // 先减速

                // 由弧度计算出当前x,y坐标值
                // 难点：看原理/正弦余弦理解.png
                // this.y += Math.tan(this.angle) * this.speed + this.gravity;
                this.y += Math.sin(this.angle) * this.speed + this.gravity;
                this.x += Math.cos(this.angle) * this.speed;

                // 透明度衰减
                this.alpha -= this.alphaDecay;
                // 当透明度小于最小衰减值 就把这个例子对象删除
                if (this.alpha < 0) {
                    return;
                }

                requestAnimationFrame(this.draw.bind(this));
            }

            // 绘制粒子（line的方式）
            draw() {
                ctx.beginPath();
                // 从集合中最后一个项开始
                const [startX, startY] = this.coords[this.coords.length - 1];
                ctx.moveTo(startX, startY);
                ctx.lineTo(this.x, this.y);
                // hsla的颜色模式
                ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.alpha}`;
                ctx.lineWidth = 4;
                ctx.lineCap = "round";
                ctx.stroke();
                this.update();
            }
        }


        // 构建烟花类 Firework
        class Firework {
            x;
            y;
            sx;
            sy;
            tx;
            ty;
            distanceTraveled;
            coords;
            angle;
            speed;
            acceleration;
            hue;
            brightness;

            // 起始点坐标sx,sy 目标点坐标tx,ty
            constructor(sx, sy, tx, ty) {
                // 当前坐标
                this.x = sx;
                this.y = sy;
                // 起始点坐标
                this.sx = sx;
                this.sy = sy;
                // 目标点坐标
                this.tx = tx;
                this.ty = ty;

                // 移动后的距离
                this.distanceTraveled = 0;

                // 烟花的轨迹坐标
                this.coords = [
                    [this.x, this.y]
                ];

                // Math.atan2是计算某点到原点0,0与x正轴的弧度值，传入y,x
                // 难点：看原理/向量坐标的关系.png 目标点向量为两个点的向量相加 已经有了起始点 那就求出另一个点
                // 求出弧度后为了update中分解为vx,vy服务
                this.angle = Math.atan2(ty - sy, tx - sx);
                this.speed = randomRange(60, 90); // 基础移动速度为2
                this.acceleration = 0.9; // 加速度系数1.05
                this.hue = randomRange(0, 360);
                this.brightness = randomRange(50, 70); // 随机亮度
            }

            // 更新某个烟花属性（烟花移动是加速度的）
            update() {
                // 删掉最后一项 在最前面塞入一项
                this.coords.pop();
                this.coords.unshift([this.x, this.y]);

                this.speed = this.acceleration * this.speed; // 进行加速度

                const vx = Math.cos(this.angle) * this.speed;
                const vy = Math.sin(this.angle) * this.speed;

                // 如果移动到目标点 就创建50个爆炸粒子对象，并删除这个射出的烟火对象

                if (this.speed < 1) {
                    let particlesNUmber = randomRange(40, 200);
                    for (let i = 0; i < particlesNUmber; i++) {
                        let particle = new Particle(this.x, this.y, this.hue);
                        particle.draw();
                    }
                    return;
                } else {
                    this.x += vx;
                    this.y += vy;
                }
                requestAnimationFrame(this.draw.bind(this));
            }

            // 绘制烟火
            draw() {
                ctx.beginPath();
                const [startX, startY] = this.coords[this.coords.length - 1];
                ctx.moveTo(startX, startY);
                ctx.lineTo(this.x, this.y);
                ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, 60%`; // 仅亮度会变化
                ctx.lineWidth = 2;
                ctx.stroke();

                this.update();
            }
        }


        function render() {
            requestAnimationFrame(render);
            // 制造拖尾效果，不使用clearRect 每次覆盖一层带透明度的底色
            ctx.globalCompositeOperation = "destination-out"; // 现有内容保持在新图形不重叠的地方
            ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
            ctx.fillRect(0, 0, canvasWidth, canvasHeight);
            ctx.globalCompositeOperation = "lighter";
            // 循环绘制和更新
            if (Math.random() > 0.9) {
                let Fire = new Firework(
                    canvasWidth / 2,
                    canvasHeight,
                    randomRange(0, canvasWidth),
                    randomRange(0, canvasHeight / 3)
                );

                Fire.draw();
            }
        }

        let body = document.body;
        canvasDOM = document.getElementById("RenderClip");
        canvasDOM.width = body.clientWidth;
        canvasDOM.height = body.clientHeight;

        ctx = canvasDOM.getContext("2d");

        ctx.strokeStyle = "#fff";
        ctx.fillStyle = "#fff";
        ctx.lineWidth = 1;
        render();
    </script>
</body>

</html>
